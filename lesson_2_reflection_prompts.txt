What happens when you initialize a repository? Why do you need to do it?

	A new hidden path ".git" will be created. .git path store the information repository needed, without this path, git can not work.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Staging area is a temporary space that store the files prepared to commit into repository, it is a middle role between workig directory and repository. Before committing files into repository, we should add desired files from working directory to staging area, then commit all the files as a package into repository.
	Staging area provides a buffer between working directory and repository, that we can have flexibility to choose commited files and make repository neat as desired.	

How can you use the staging area to make sure you have one commit per logical
change?

	After logical change at working directory, we can use "git diff" command to double check the difference between working directory and staging area. Furthermore, after "git add" modified file(s), we also can use "git diff --staged" to further check the difference between staging area and repository. Both of these two actions can help us make sure to commit is right and per logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
