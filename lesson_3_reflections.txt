When would you want to use a remote repository rather than keeping all your work local?
	
	When I want to share a project to other people or I want to make a backup for remote working, I would prefer to use remote repository.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    There might be also some modifications in local repository. If these modifications haven't push to remote repository, auto up-to-date might take unexpected action to local repository(e.g. merge).  

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks means to make a copied repository from github to github.
    Clones means to make a copied repository from github to local directory, or from local to local.
    Branches means to create a new extended codebase at certain commit point to separate a new codebase from master.

    I will use a fork when I'd like to copy a repository from somebody's github to my github. And, using a clone when I need to remote copy a repository to local. Finally, I'd like to create a branch when I want to take an experiment without any influence on master codebase.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    First, we can work at local directory without internet access for a while.(e.g. get on a plane)
    Second, having a copy of the last known state would reduce the possibility of conflicting changes from other collaborators. 
    Third, even conflicts occur, we can check the difference and decide how to combine more easily and efficiently with the last state of remote. 

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I might use share folder system like Dropbox to collaborate coding. It will be easier to share and sync working directory because of that we don't need to push and pull codebase manually. 
    But, Dropbox does not provide manual save option, it will save modified files automatically. If many people are working on the same files at the same time, it might cause serious conflict and hard to maintain.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    When I want to take some interesting experiments, make a new algorithm, or creat new items that I don't want to affect master branch, I will make changes in a separate branch.

    Benefit of making changes directly in master: Most efficient. If the modifications could be assured, making changes directly in master is the fastest way to update the repository. However, it also comes along with risks. If any side effect occures or many people make modifications on the same file, the master branch will be affected directly. 
    Benefit of making changes in a separated branch: More flexibile. Although making changes in a separated branch would cause more efforts, it offers flexibility to let other collaborators check before merging. This advantage would reduce the possibility of conflicting changes and make master branch easier to maintain.
